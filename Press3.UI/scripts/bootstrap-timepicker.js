/*!
* Timepicker Component for Twitter Bootstrap
*
* Copyright 2013 Joris de Wit
*
* Contributors https://github.com/jdewit/bootstrap-timepicker/graphs/contributors
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
!function (t, e, i, n) { "use strict"; var s = function (e, i) { this.widget = "", this.$element = t(e), this.defaultTime = i.defaultTime, this.disableFocus = i.disableFocus, this.isOpen = i.isOpen, this.minuteStep = i.minuteStep, this.modalBackdrop = i.modalBackdrop, this.secondStep = i.secondStep, this.showInputs = i.showInputs, this.showMeridian = i.showMeridian, this.showSeconds = i.showSeconds, this.template = i.template, this.appendWidgetTo = i.appendWidgetTo, this._init() }; s.prototype = { constructor: s, _init: function () { var e = this; this.$element.parent().hasClass("input-append") || this.$element.parent().hasClass("input-prepend") ? (this.$element.parent(".input-append, .input-prepend").find(".add-on").on({ "click.timepicker": t.proxy(this.showWidget, this) }), this.$element.on({ "focus.timepicker": t.proxy(this.highlightUnit, this), "click.timepicker": t.proxy(this.highlightUnit, this), "keydown.timepicker": t.proxy(this.elementKeydown, this), "blur.timepicker": t.proxy(this.blurElement, this) })) : this.template ? this.$element.on({ "focus.timepicker": t.proxy(this.showWidget, this), "click.timepicker": t.proxy(this.showWidget, this), "blur.timepicker": t.proxy(this.blurElement, this) }) : this.$element.on({ "focus.timepicker": t.proxy(this.highlightUnit, this), "click.timepicker": t.proxy(this.highlightUnit, this), "keydown.timepicker": t.proxy(this.elementKeydown, this), "blur.timepicker": t.proxy(this.blurElement, this) }), this.$widget = this.template !== !1 ? t(this.getTemplate()).prependTo(this.$element.parents(this.appendWidgetTo)).on("click", t.proxy(this.widgetClick, this)) : !1, this.showInputs && this.$widget !== !1 && this.$widget.find("input").each(function () { t(this).on({ "click.timepicker": function () { t(this).select() }, "keydown.timepicker": t.proxy(e.widgetKeydown, e) }) }), this.setDefaultTime(this.defaultTime) }, blurElement: function () { this.highlightedUnit = n, this.updateFromElementVal() }, decrementHour: function () { if (this.showMeridian) if (1 === this.hour) this.hour = 12; else { if (12 === this.hour) return this.hour--, this.toggleMeridian(); if (0 === this.hour) return this.hour = 11, this.toggleMeridian(); this.hour-- } else 0 === this.hour ? this.hour = 23 : this.hour--; this.update() }, decrementMinute: function (t) { var e; e = t ? this.minute - t : this.minute - this.minuteStep, 0 > e ? (this.decrementHour(), this.minute = e + 60) : this.minute = e, this.update() }, decrementSecond: function () { var t = this.second - this.secondStep; 0 > t ? (this.decrementMinute(!0), this.second = t + 60) : this.second = t, this.update() }, elementKeydown: function (t) { switch (t.keyCode) { case 9: switch (this.updateFromElementVal(), this.highlightedUnit) { case "hour": t.preventDefault(), this.highlightNextUnit(); break; case "minute": (this.showMeridian || this.showSeconds) && (t.preventDefault(), this.highlightNextUnit()); break; case "second": this.showMeridian && (t.preventDefault(), this.highlightNextUnit()) } break; case 27: this.updateFromElementVal(); break; case 37: t.preventDefault(), this.highlightPrevUnit(), this.updateFromElementVal(); break; case 38: switch (t.preventDefault(), this.highlightedUnit) { case "hour": this.incrementHour(), this.highlightHour(); break; case "minute": this.incrementMinute(), this.highlightMinute(); break; case "second": this.incrementSecond(), this.highlightSecond(); break; case "meridian": this.toggleMeridian(), this.highlightMeridian() } break; case 39: t.preventDefault(), this.updateFromElementVal(), this.highlightNextUnit(); break; case 40: switch (t.preventDefault(), this.highlightedUnit) { case "hour": this.decrementHour(), this.highlightHour(); break; case "minute": this.decrementMinute(), this.highlightMinute(); break; case "second": this.decrementSecond(), this.highlightSecond(); break; case "meridian": this.toggleMeridian(), this.highlightMeridian() } } }, formatTime: function (t, e, i, n) { return t = 10 > t ? "0" + t : t, e = 10 > e ? "0" + e : e, i = 10 > i ? "0" + i : i, t + ":" + e + (this.showSeconds ? ":" + i : "") + (this.showMeridian ? " " + n : "") }, getCursorPosition: function () { var t = this.$element.get(0); if ("selectionStart" in t) return t.selectionStart; if (i.selection) { t.focus(); var e = i.selection.createRange(), n = i.selection.createRange().text.length; return e.moveStart("character", -t.value.length), e.text.length - n } }, getTemplate: function () { var t, e, i, n, s, a; switch (this.showInputs ? (e = '<input type="text" name="hour" class="bootstrap-timepicker-hour" maxlength="2"/>', i = '<input type="text" name="minute" class="bootstrap-timepicker-minute" maxlength="2"/>', n = '<input type="text" name="second" class="bootstrap-timepicker-second" maxlength="2"/>', s = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian" maxlength="2"/>') : (e = '<span class="bootstrap-timepicker-hour"></span>', i = '<span class="bootstrap-timepicker-minute"></span>', n = '<span class="bootstrap-timepicker-second"></span>', s = '<span class="bootstrap-timepicker-meridian"></span>'), a = '<table><tr><td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td><td class="separator">&nbsp;</td><td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="incrementSecond"><i class="icon-chevron-up"></i></a></td>' : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>' : "") + "</tr>" + "<tr>" + "<td>" + e + "</td> " + '<td class="separator">:</td>' + "<td>" + i + "</td> " + (this.showSeconds ? '<td class="separator">:</td><td>' + n + "</td>" : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td>' + s + "</td>" : "") + "</tr>" + "<tr>" + '<td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td>' + '<td class="separator"></td>' + '<td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' + (this.showSeconds ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="decrementSecond"><i class="icon-chevron-down"></i></a></td>' : "") + (this.showMeridian ? '<td class="separator">&nbsp;</td><td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>' : "") + "</tr>" + "</table>", this.template) { case "modal": t = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="' + (this.modalBackdrop ? "true" : "false") + '">' + '<div class="modal-header">' + '<a href="#" class="close" data-dismiss="modal">Ãƒâ€”</a>' + "<h3>Pick a Time</h3>" + "</div>" + '<div class="modal-content">' + a + "</div>" + '<div class="modal-footer">' + '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>' + "</div>" + "</div>"; break; case "dropdown": t = '<div class="bootstrap-timepicker-widget dropdown-menu">' + a + "</div>" } return t }, getTime: function () { return this.formatTime(this.hour, this.minute, this.second, this.meridian) }, hideWidget: function () { this.isOpen !== !1 && (this.showInputs && this.updateFromWidgetInputs(), this.$element.trigger({ type: "hide.timepicker", time: { value: this.getTime(), hours: this.hour, minutes: this.minute, seconds: this.second, meridian: this.meridian } }), "modal" === this.template ? this.$widget.modal("hide") : this.$widget.removeClass("open"), t(i).off("mousedown.timepicker"), this.isOpen = !1) }, highlightUnit: function () { this.position = this.getCursorPosition(), this.position >= 0 && this.position <= 2 ? this.highlightHour() : this.position >= 3 && this.position <= 5 ? this.highlightMinute() : this.position >= 6 && this.position <= 8 ? this.showSeconds ? this.highlightSecond() : this.highlightMeridian() : this.position >= 9 && this.position <= 11 && this.highlightMeridian() }, highlightNextUnit: function () { switch (this.highlightedUnit) { case "hour": this.highlightMinute(); break; case "minute": this.showSeconds ? this.highlightSecond() : this.showMeridian ? this.highlightMeridian() : this.highlightHour(); break; case "second": this.showMeridian ? this.highlightMeridian() : this.highlightHour(); break; case "meridian": this.highlightHour() } }, highlightPrevUnit: function () { switch (this.highlightedUnit) { case "hour": this.highlightMeridian(); break; case "minute": this.highlightHour(); break; case "second": this.highlightMinute(); break; case "meridian": this.showSeconds ? this.highlightSecond() : this.highlightMinute() } }, highlightHour: function () { var t = this.$element.get(0); this.highlightedUnit = "hour", t.setSelectionRange && setTimeout(function () { t.setSelectionRange(0, 2) }, 0) }, highlightMinute: function () { var t = this.$element.get(0); this.highlightedUnit = "minute", t.setSelectionRange && setTimeout(function () { t.setSelectionRange(3, 5) }, 0) }, highlightSecond: function () { var t = this.$element.get(0); this.highlightedUnit = "second", t.setSelectionRange && setTimeout(function () { t.setSelectionRange(6, 8) }, 0) }, highlightMeridian: function () { var t = this.$element.get(0); this.highlightedUnit = "meridian", t.setSelectionRange && (this.showSeconds ? setTimeout(function () { t.setSelectionRange(9, 11) }, 0) : setTimeout(function () { t.setSelectionRange(6, 8) }, 0)) }, incrementHour: function () { if (this.showMeridian) { if (11 === this.hour) return this.hour++, this.toggleMeridian(); 12 === this.hour && (this.hour = 0) } return 23 === this.hour ? (this.hour = 0, void 0) : (this.hour++, this.update(), void 0) }, incrementMinute: function (t) { var e; e = t ? this.minute + t : this.minute + this.minuteStep - this.minute % this.minuteStep, e > 59 ? (this.incrementHour(), this.minute = e - 60) : this.minute = e, this.update() }, incrementSecond: function () { var t = this.second + this.secondStep - this.second % this.secondStep; t > 59 ? (this.incrementMinute(!0), this.second = t - 60) : this.second = t, this.update() }, remove: function () { t("document").off(".timepicker"), this.$widget && this.$widget.remove(), delete this.$element.data().timepicker }, setDefaultTime: function (t) { if (this.$element.val()) this.updateFromElementVal(); else if ("current" === t) { var e = new Date, i = e.getHours(), n = Math.floor(e.getMinutes() / this.minuteStep) * this.minuteStep, s = Math.floor(e.getSeconds() / this.secondStep) * this.secondStep, a = "AM"; this.showMeridian && (0 === i ? i = 12 : i >= 12 ? (i > 12 && (i -= 12), a = "PM") : a = "AM"), this.hour = i, this.minute = n, this.second = s, this.meridian = a, this.update() } else t === !1 ? (this.hour = 0, this.minute = 0, this.second = 0, this.meridian = "AM") : this.setTime(t) }, setTime: function (t) { var e, i; this.showMeridian ? (e = t.split(" "), i = e[0].split(":"), this.meridian = e[1]) : i = t.split(":"), this.hour = parseInt(i[0], 10), this.minute = parseInt(i[1], 10), this.second = parseInt(i[2], 10), isNaN(this.hour) && (this.hour = 0), isNaN(this.minute) && (this.minute = 0), this.showMeridian ? (this.hour > 12 ? this.hour = 12 : this.hour < 1 && (this.hour = 12), "am" === this.meridian || "a" === this.meridian ? this.meridian = "AM" : ("pm" === this.meridian || "p" === this.meridian) && (this.meridian = "PM"), "AM" !== this.meridian && "PM" !== this.meridian && (this.meridian = "AM")) : this.hour >= 24 ? this.hour = 23 : this.hour < 0 && (this.hour = 0), this.minute < 0 ? this.minute = 0 : this.minute >= 60 && (this.minute = 59), this.showSeconds && (isNaN(this.second) ? this.second = 0 : this.second < 0 ? this.second = 0 : this.second >= 60 && (this.second = 59)), this.update() }, showWidget: function () { if (!this.isOpen && !this.$element.is(":disabled")) { var e = this; t(i).on("mousedown.timepicker", function (i) { 0 === t(i.target).closest(".bootstrap-timepicker-widget").length && e.hideWidget() }), this.$element.trigger({ type: "show.timepicker", time: { value: this.getTime(), hours: this.hour, minutes: this.minute, seconds: this.second, meridian: this.meridian } }), this.disableFocus && this.$element.blur(), this.updateFromElementVal(), "modal" === this.template ? this.$widget.modal("show").on("hidden", t.proxy(this.hideWidget, this)) : this.isOpen === !1 && this.$widget.addClass("open"), this.isOpen = !0 } }, toggleMeridian: function () { this.meridian = "AM" === this.meridian ? "PM" : "AM", this.update() }, update: function () { this.$element.trigger({ type: "changeTime.timepicker", time: { value: this.getTime(), hours: this.hour, minutes: this.minute, seconds: this.second, meridian: this.meridian } }), this.updateElement(), this.updateWidget() }, updateElement: function () { this.$element.val(this.getTime()).change() }, updateFromElementVal: function () { var t = this.$element.val(); t && this.setTime(t) }, updateWidget: function () { if (this.$widget !== !1) { var t = this.hour < 10 ? "0" + this.hour : this.hour, e = this.minute < 10 ? "0" + this.minute : this.minute, i = this.second < 10 ? "0" + this.second : this.second; this.showInputs ? (this.$widget.find("input.bootstrap-timepicker-hour").val(t), this.$widget.find("input.bootstrap-timepicker-minute").val(e), this.showSeconds && this.$widget.find("input.bootstrap-timepicker-second").val(i), this.showMeridian && this.$widget.find("input.bootstrap-timepicker-meridian").val(this.meridian)) : (this.$widget.find("span.bootstrap-timepicker-hour").text(t), this.$widget.find("span.bootstrap-timepicker-minute").text(e), this.showSeconds && this.$widget.find("span.bootstrap-timepicker-second").text(i), this.showMeridian && this.$widget.find("span.bootstrap-timepicker-meridian").text(this.meridian)) } }, updateFromWidgetInputs: function () { if (this.$widget !== !1) { var e = t("input.bootstrap-timepicker-hour", this.$widget).val() + ":" + t("input.bootstrap-timepicker-minute", this.$widget).val() + (this.showSeconds ? ":" + t("input.bootstrap-timepicker-second", this.$widget).val() : "") + (this.showMeridian ? " " + t("input.bootstrap-timepicker-meridian", this.$widget).val() : ""); this.setTime(e) } }, widgetClick: function (e) { e.stopPropagation(), e.preventDefault(); var i = t(e.target).closest("a").data("action"); i && this[i]() }, widgetKeydown: function (e) { var i = t(e.target).closest("input"), n = i.attr("name"); switch (e.keyCode) { case 9: if (this.showMeridian) { if ("meridian" === n) return this.hideWidget() } else if (this.showSeconds) { if ("second" === n) return this.hideWidget() } else if ("minute" === n) return this.hideWidget(); this.updateFromWidgetInputs(); break; case 27: this.hideWidget(); break; case 38: switch (e.preventDefault(), n) { case "hour": this.incrementHour(); break; case "minute": this.incrementMinute(); break; case "second": this.incrementSecond(); break; case "meridian": this.toggleMeridian() } break; case 40: switch (e.preventDefault(), n) { case "hour": this.decrementHour(); break; case "minute": this.decrementMinute(); break; case "second": this.decrementSecond(); break; case "meridian": this.toggleMeridian() } } } }, t.fn.timepicker = function (e) { var i = Array.apply(null, arguments); return i.shift(), this.each(function () { var n = t(this), a = n.data("timepicker"), o = "object" == typeof e && e; a || n.data("timepicker", a = new s(this, t.extend({}, t.fn.timepicker.defaults, o, t(this).data()))), "string" == typeof e && a[e].apply(a, i) }) }, t.fn.timepicker.defaults = { defaultTime: "current", disableFocus: !1, isOpen: !1, minuteStep: 15, modalBackdrop: !1, secondStep: 15, showSeconds: !1, showInputs: !0, showMeridian: !0, template: "dropdown", appendWidgetTo: ".bootstrap-timepicker" }, t.fn.timepicker.Constructor = s }(jQuery, window, document);